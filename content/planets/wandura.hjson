//decorative earthlike(?) planet, name is an easter egg referencing v6 exotic
//also an example
//also, use multiple planets if you need several meshes

//generator - necessary to prevent crashes, even if you do not use numbered sectors
//also accepts just doing generator: AsteroidGenerator
//also these numbers are funny and i have no idea how they precisely work
generator: {
  type: AsteroidGenerator
  berylChance: 0.45
  iceChance: 0.15
  ferricChance: 0.55
  stoneChance: 2
  radMin: 1500
  radMax: 1500
  berylliumScale: 4
  copperScale: 0.6
  scale: 25
  mag: 0.5
  thresh: 0.9
  fscl: 30
  fper: 0.4
}
//sector count - larger numbers mean exponentially more sectors, may crash above 4
sectorSize: 3.1
//parent to orbit around and follow
parent: sun
//icon colour
iconColor: 63ad7a
//radius from the planet's "surface" that the atmosphere blur begins
atmosphereRadIn: 0
//radius where it fades away - this can have visual issues if above 0.25
atmosphereRadOut: 0.1
//orbit radius, measured in units i do not know
orbitRadius: 32
//angle of the starting position of the orbit, so that all planets are not in the same line 
orbitOffset: 140
//time taken to complete one full orbit, in seconds
orbitTime: 12000
//time in ticks that it takes for one day to pass on the planet
rotateTime: 5000
//add tidalLock: true and updateLighting: false to make a planet's daylight not move
//whether this planet can be selected, ever
accessible: false
//whether to allow launching to numbered sectors - set to false for erekir sector behaviour
allowLaunchToNumbered: false
//visual mesh made of hexagons - note that JSON only supports NoiseMesh and HexSkyMesh
mesh: {
  //a two colour mesh type
  type: NoiseMesh
  //number of hexagons - like sectors, this is exponential, so beware of frying your GPU (although your GPU can handle way more hexagons here)
  divisions: 5
  //mesh size - 1 is serpulo
  radius: 0.9
  //first colour to use 
  color1: 596ab8
  //second
  color2: 596ab8
  //mesh shape values - just mess around with these until they stop exploding, i still do not know how they work
  octaves: 1
  persistence: 0.01
  scale: 0.01
  mag: 1
  //these control how the two colours behave on the mesh
  coct: 1
  cper: 1
  cscl: 1
  cthresh: 1
}
//mesh to use for drawing the clouds, essentially just a second mesh
cloudMesh: {
  type: HexSkyMesh
  //rotate speed 
  speed: 2.3
  divisions: 6
  //this radius value is based on the planet "surface", not the "core" of the planet, unlike noise meshes
  radius: 0.1
  //cloud colour
  color: e8effa88
  //more explodey values, they're even more sensitive here
  octaves: 3
  persistence: 0.5
  scl: 1
  thresh: 0.43
}